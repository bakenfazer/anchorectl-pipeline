version: 2
jobs:

  ### the following variables have been set in the "anchore" context
  ###
  ### ANCHORECTL_USERNAME
  ### ANCHORECTL_PASSWORD
  ### ANCHORECTL_URL
  ### 
  ### see anchorectl docs for more info 
  ### https://docs.anchore.com/current/docs/using/anchorectl_usage/
  ### https://docs.anchore.com/current/docs/deployment/anchorectl/
  ###
  ### also in this context there is
  ### ANCHORE_FAIL_ON_POLICY 
  ### which is used to control whether to break pipeline if there
  ### is a policy violation (see scan step below)
  ###
  ### it's probably better since anchorectl 1.3.0 to use ANCHORECTL_FAIL_BASED_ON_RESULTS 
  ### instead of ANCHORE_FAIL_ON_POLICY
  
  ### things to do:
  ### 1)  is there a way to set global variables (constructed from other variables) in circleci?
  ###     e.g. in codefresh we can "cf_export ANCHORE_REPO=${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
  ###     and use that across steps rather than defining IMAGE in each step.
  ### 2)  after promoting, optionally add subscriptions for vuln_update and policy_eval etc.

  build-push:
    machine: true
    steps:
      - checkout
      - run: 
          name: Set Environment
          command: |
            echo "DEBUG: bash_env: "
            env
            ### first set the IMAGE variable (can't set this globally if we want to construct it from other variables)
            echo 'export IMAGE=${DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}:circleci-latest' >> ${BASH_ENV}
            ### you don't need this if you're using the containerized tools but it won't hurt to leave this
            echo 'export PATH=${HOME}/.local/bin/:${PATH}' >> ${BASH_ENV}
            source ${BASH_ENV}
      - run:
          name: Build Docker image
          command: |
            ### build image
            docker build --pull --no-cache -t $IMAGE .
      - run:
          name: Install Anchore Tools
          command: |
            #
            ### this step is really not necessary, you can run these tools directly from my pvnovarese/anchore-tools:main
            ### image, but if you don't want to run random people's images, you can install these dirctly (there is an
            ### image for syft that Anchore officially maintains, but not one for anchorectl (yet).
            #
            set -o pipefail
            curl -sSfL  https://anchorectl-releases.anchore.io/anchorectl/install.sh | sh -s -- -b ${HOME}/.local/bin v1.3.0
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b ${HOME}/.local/bin v0.63.0
      - run:
          name: Test Docker image
          command: |
            echo "testing connectivity"
            anchorectl system status
            #
            ### generate SBOM with syft and then upload the SBOM with anchorectl
            ### note if you don't care about the Dockerfile you can skip the -v mount
            ### and if you remove the --dockerfile option you also probably won't need 
            ### the --force option either.
            #
            set -o pipefail
            syft -v -o json packages ${IMAGE} | anchorectl image add --no-auto-subscribe --dockerfile Dockerfile --force --wait --annotation build_tool=circleci ${IMAGE} --from -
            #
            ### alternative to downloading syft directly, you can just use the containerized version
            ### or in this case, my anchore-tools image that has syft, grype, anchorectl plus some
            ### other common tools.
            #
            #docker run \
            #     -e ANCHORECTL_URL -e ANCHORECTL_USERNAME -e ANCHORECTL_PASSWORD \
            #     -v /home/circleci/project/Dockerfile:/tmp/Dockerfile \
            #     pvnovarese/anchore-tools:main \
            #     /bin/bash -c "syft -o json packages ${IMAGE} | anchorectl image add --wait --dockerfile /tmp/Dockerfile --force --annotation build_tool=circleci ${IMAGE} --from -"
            #     
            ### test policy evaluation.  Set ANCHORECTL_FAIL_BASED_ON_RESULTS if you want to break pipeline for a policy violation here.
            ### note these could also be run from the anchore-tools 
            #
            ### uncomment this line to use the container image instead of directly-installed anchorectl
            # docker run -e ANCHORECTL_URL -e ANCHORECTL_USERNAME -e ANCHORECTL_PASSWORD pvnovarese/anchore-tools:main \
            anchorectl image check --detail ${IMAGE} 
      - run:
          name: Push Docker image
          command: |
            #
            ### if we got this far, then the image has passed, we can "promote" it
            ### in this case, that means pushing it to docker hub
            #
            ### login to docker hub, change to whatever registry you're using
            #
            echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
            #
            ### now the push
            #
            docker push ${IMAGE}  
            
  examine:
    docker:
      - image: docker.io/pvnovarese/anchore-tools:main
    steps:
      - checkout
      - run: 
          name: Set Environment
          command: |
            ### first set the IMAGE variable (can't set this globally if we want to construct it from other variables)
            echo 'export IMAGE=${DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}:circleci-latest' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Vulnerability Report
          command: anchorectl image vulnerabilities ${IMAGE}
      - run:
          name: Policy Report
          command: anchorectl image check --detail ${IMAGE}


            
workflows:
  version: 2
  enterprise:
    jobs:
      - build-push:
          filters:
            branches:
              ignore:
                - scratch
                - test
          context:
            - anchore  # in the "anchore" context, I've defined ANCHORE_CLI_URL, ANCHORE_CLI_USER, ANCHORE_CLI_PASS, ANCHORE_FAIL_ON_POLICY, DOCKER_USERNAME, and DOCKER_PASSWORD
      - examine:
          filters:
            branches:
              only:
                - main
          context:
            - anchore
          requires:
            - build-push
  weekly:
    triggers: #use the triggers key to indicate a scheduled build
      - schedule:
          cron: "0 18 * * 2" # tuesday at 18:00
          filters:
            branches:
              only:
                - main
    jobs:
      - build-push:
         context:
           - anchore  # in the "anchore" context, I've defined ANCHORE_CLI_URL, ANCHORE_CLI_USER, ANCHORE_CLI_PASS, ANCHORE_FAIL_ON_POLICY, DOCKER_USERNAME, and DOCKER_PASSWORD
      - examine:
          context:
           - anchore
          requires:
            - build-push
